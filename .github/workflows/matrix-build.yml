name: Matrix Build Modules
on:
  workflow_call:
    secrets:
      TELEGRAM_TOKEN:
        description: "Telegram Bot Token"
        required: true
      TELEGRAM_TO:
        description: "Telegram Chat ID"
        required: true
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

permissions: write-all

jobs:
  generate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.versionr }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare version
        id: version
        run: echo "versionr=$(date +v%Y.%m.%d-%H%M)" >> $GITHUB_OUTPUT

      - name: Generate release
        run: |
          version=${{ steps.version.outputs.versionr }}
          echo -e "# ReVanced Patches\n" > release_notes.md
          dateRevanced=$(gh release view --json publishedAt -q .publishedAt --repo revanced/revanced-patches | date)
          echo -e "\n Release published on $dateRevanced\n" >> release_notes.md
          gh release view --json body -q .body --repo revanced/revanced-patches >> release_notes.md
          echo -e "\n---\n" >> release_notes.md
          echo -e "# ReX Patches\n" >> release_notes.md
          dateReX=$(gh release view --json publishedAt -q .publishedAt --repo YT-Advanced/ReX-patches | date)
          echo -e "\n Release published on $dateReX\n" >> release_notes.md
          gh release view --json body -q .body --repo YT-Advanced/ReX-patches >> release_notes.md
          echo -e "\n---\n" >> release_notes.md
          echo -e "\nUse [MicroG](https://github.com/inotia00/VancedMicroG/releases) for YouTube and Music" >> release_notes.md
          sed -i "1s/^/Release $version\n\n/" release_notes.md
          gh release create "$version" --draft -t "$version" -F release_notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run:
    runs-on: ubuntu-latest
    needs: generate-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: "YouTube-ReX"
          - id: "Music-ReX"
          - id: "YouTube"
          - id: "Music"
          - id: "Twitter"
          - id: "Twitch"
          # - id: "TikTok"
          - id: "Reddit"
          - id: "Messenger"
          - id: "Facebook"
          # - id: 'Spotify'
          - id: "Spotify-Lite"
          #   - id: "Citra"
          #   - id: "Backdrops"
          #   - id: "WarnWetter"
          #   - id: "Windyapp"
          - id: "MyExpenses"
          - id: "NyxMusicPlayer"
          #   - id: "IconPackStudio"
          - id: "TickTick"
          - id: "Tasker"
          #   - id: "Photomath"
          #   - id: "Instagram-armeabi-v7a"
          # - id: "Instagram"
          - id: "InShorts"
          #   - id: "SyncForReddit"
          - id: "InfinityForReddit"
          - id: "VSCO"
          - id: "Pixiv"
          #   - id: "Trakt"
          #   - id: "MemeGenerator"
          - id: "Lightroom"
          - id: "Tumblr"

    env:
      RELEASE_VERSION: ${{ needs.generate-release.outputs.version }}
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "20"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Generate ${{ matrix.id }} config
        run: ./gen_sep_config.sh config.toml ${{ matrix.id }} sep_config.toml

      - name: Build modules/APKs
        run: |
          # on error retry 3 times
          # ./build.sh sep_config.toml
          count=0
          if ! ./build.sh sep_config.toml; then
            count=$((count+1))
            if [ $count -lt 3 ]; then
              ./build.sh sep_config.toml
            else
              echo "Failed to build ${{ matrix.id }} after 3 attempts"
              exit 1
            fi
          fi
        env:
          NEXT_VER_CODE: ${{ env.RELEASE_VERSION }}

      - name: Get output
        id: get_output
        if: ${{ matrix.id == 'YouTube' }}
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Upload modules to release
        run: |
          # get all apk files in ./build/* directory, for each run gh release upload
          for file in $(find build -type f -name "*.apk"); do
            gh release upload ${{ env.RELEASE_VERSION }} $file
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-metadata:
    needs: [generate-release, run]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Prepare build.md
        run: |
          git checkout -b update
          filename="build.md"
          ./extras.sh "revanced/revanced-integrations" "revanced/revanced-patches" "revanced/revanced-cli" > $filename
          echo -e "\n\n" >> $filename
          ./extras.sh "YT-Advanced/ReX-integrations" "YT-Advanced/ReX-patches" "revanced/revanced-cli" >> $filename

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md
          commit_message: Bump version ${{ needs.generate-release.outputs.version }}

  release:
    needs: [generate-release, run]
    runs-on: ubuntu-latest
    steps:
      - name: Mark release non-draft
        run: |
          if [[ ${{ github.ref_name }} == 'main' ]]; then
            gh release edit ${{ needs.generate-release.outputs.version }} --draft=false --latest
          else
            gh release edit ${{ needs.generate-release.outputs.version }} --draft=false --prerelease
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: release
    if: ${{ github.ref_name == 'main' }}
    uses: ./.github/workflows/notify.yml
    secrets:
      TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
